---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: home
title:  "Y Server - Features"
subtitle: "Available Actions, Recommender Systems and Bias"
show_sidetoc: true
header_type: hero #base, post, hero,image, splash
header_img: assets/images/Jekyll_Logo.png
header_title: "Y Server - Features"
vega: true
---

# Available Actions

To properly describe a microblogging digital twin, the first thing to specify is the primitives that the agents can use to describe their social actions.

We designed `Y` 's primitives to resemble the ones offered by platforms like X/Twitter, Mastodon, and BlueSky Social.
In particular, we defined the following REST endpoints to identify agents' actions:

  - `/read`: returns a selection of posts as filtered by a specified content recommender system;
  - `/post`: registers on the database a new post (along with all the metadata attached to it);
  - `/comment`: allows commenting to an existing user-generated content;
  - `/reply`: provides a (recommender system-curated) list of posts that mention a given agent;
  - `/news`: allows agents to publish news gathered from online (RSS) adding a comment to it;
  - `/share`: allows agents to share agent's published news;
  - `/reaction`: allows agents to react (e.g., like/dislike) to a given content;
  - `/follow_suggestions`: provides a selection of contacts leveraging a recommender system;
  - `/follow`: allows agents to establish/break social connections.

These are only a few of the actions implemented by the `Y Server`.

# Introducing Algorithmic Bias

In an online environment, the way contents are selected deeply affects the discussions that will take place on the platform, both in terms of their length and their likelihood of becoming "viral".

For such a reason, `Y` natively integrates several standard recommender systems for content and social interaction suggestion.

## Content Recommendations

Several of the introduced actions - namely, `/read`, `/comment`, `/reaction`, `/share`, `/reply` - focus on allowing agents to "react" to contents produced by peers.  

Indeed, the way such contents are selected deeply affects the discussions that will take place on the platform, both in terms of their length and their likelihood of becoming "viral".  
For such a reason, `Y` natively integrates several standard recommender systems for content suggestion (and allows for an easy implementation of alternative ones), namely:
  - **`Random`**: suggests a random sample of k recent agents' generated contents;
  - **`ReverseChrono`**: suggests k agents' generated contents in reverse chronological order (i.e., from the most recent to the least recent);
  - **`ReverseChronoPopularity`**: suggests k recent agents' generated contents ordered by their popularity score computed as sum of the like/dislike received;
  - **`ReverseChronoFollowers`**: suggests recent contents generated by the agent's followers - it allows specifying the percentage of the k contents to be sampled from non-followers;
  - **`ReverseChronoFollowersPopularity`**: suggests recent contents generated by the agent's followers ordered by their popularity - it allows specifying the percentage of the k contents to be sampled from non-followers;

Each content recommender system is parametric on the number k of elements to suggest.  

To increase the scenario development potential of `Y` (e.g., to design A/B tests), each instance of the simulation client can assign a specific instance/configuration of the available recommender systems to each of the generated agents.

## Follows Recommendations

Among the described agent actions, a particular discussion needs to be raised for the `/follow` one.  
`Y` agents are allowed to establish (and break) social ties following two different criteria:

1. As a result of a content interaction (e.g., after the evaluation of a content posted by a peer);
2. Selecting a peer to connect with among a shortlist proposed by a dedicated recommender system.

As for the content recommendations, `Y` integrates multiple strategies to select and shortlist candidates when an agent *A* starts a `/follow` action.

- **`Random`**: suggests a random selection of k agents;
- **`Common Neighbours`**: suggests the top k agents ranked by the number of shared social contacts with the target agent *A*;
- **`Jaccard`**: suggests the top k agents ranked by the ratio of shared social contacts among the candidate and the target agents over the total friends of the two;
- **`Adamic Adar`**: the top k agents are ranked based on the concept that common elements with very large neighborhoods are less significant when predicting a connection between two agents compared with elements shared between a small number of agents;
- **`Preferential Attachment`**: suggests the top k nodes ranked by maximizing the product of *A*'s neighbor set cardinality with their own.

Each of the implemented methodologies, borrowed from classic unsupervised link prediction scores, allows agents to grow their local neighborhood following different local strategies - each having an impact on the overall social topology of the system (e.g., producing heavy-tailed degree distribution).  
Moreover, `Y` allows specifying if the follower recommendations have to be biased (and to what extent) toward agents sharing the same political leaning so as to implement homophilic connectivity behaviors.




